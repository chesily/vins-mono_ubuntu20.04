%YAML:1.0

#common parameters
imu_topic: "/mavros/imu/data_raw"
image_topic: "/usb_cam/image_raw"
output_path: "/home/tony-ws1/output/"

#camera calibration 
model_type: PINHOLE
camera_name: camera
image_width: 640
image_height: 480
distortion_parameters:
   k1: -0.4174144444809084
   k2: 0.1607427486146861
   p1: -0.0018039240958903982
   p2: -0.0005049216193864576
projection_parameters:
   fx: 4.800727352399258e+02
   fy: 4.7977491640269307e+02
   cx: 3.2637666239840905e+02
   cy: 2.4838311840522746e+02

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 1   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [-0.00455639,  0.1036703,   0.99460128, 
          -0.99998884, -0.00171629, -0.00440218, 
           0.00125065, -0.99461024,  0.10367696]
   # data: [ -0.0802238,  0.11861,  0.989695,
   #         0.996455,  -0.0347814,  -0.0766034, 
   #         0.025337,  -0.992332,  0.12098]
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [0.08172959, -0.01696805, -0.00108267]

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 25            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 0             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.181996          # accelerometer measurement noise standard deviation. #0.2  0.00181996
gyr_n: 0.008520         # gyroscope measurement noise standard deviation.     #0.05  0.00008520
acc_w: 0.002543         # accelerometer bias random work noise standard deviation.  #0.02   0.00002543
gyr_w: 0.000410         # gyroscope bias random work noise standard deviation.     #4.0e-5  0.00000410
g_norm: 9.80655       # gravity magnitude

#loop closure parameters
loop_closure: 1                    # start loop closure
fast_relocalization: 1             # useful in real-time and large project
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/tony-ws1/output/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 0                     # online estimate time offset between camera and imu
td: -0.021769            # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)  -0.03310330412872227

#rolling shutter parameters
rolling_shutter: 0                      # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ